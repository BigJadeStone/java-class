-배열에서 마지막 순서(인덱스)까지의 값을 출력하고싶으면 
 범위를  0 에서  <길이(길이보다 미만까지) 배열문을 돌려주면 된다.
 (WhileEX06, Quiz11,WhileEx07 참고)
	반복횟수 조건을 설정할 때 범위를 숫자로 정해주면 나중에 배열이 더 커질 때 
		 자꾸 조건을 다시 설정해줘야한다. 
		 i <= arr.length - 1 이렇게 이하로 설정해줄 떄는 길이에 -1 해줘야한다. 
		 i < arr.length  길이미만. 위와 같은 의미이다.
	< 배열만드는 법 복습. >
		배열만드는 법.
		 * int[] name = new int[만들배열 크기의 해당하는 숫자, 순서는 0부터 시작.];
		 * 혹은 int[] name = {1,2,3,4,5,6};
		 * array[넣을 배열의 위치에 해당하는 숫자] = 넣을 값;
		 * 배열의 길이를 보는 명령어.
		   .length
		 * 배열의 모든 인덱스 값들을 보는 명령어.
		   Arrays.toString(배열이름)
		   
# 반복문 do ~ while (day02 에 DoWhileEx 참고)
	뒤에서 사용할 일이 거의 없을것. ( 그냥 이런게 있다라고만 알아두면 됨.)
	- while문은 조건식을 먼저 검사하고 실행문이 반복되기 때문에 처음 실행 조건이 false라면 실행문이 단 한번도 실행되지 않습니다.
	- 그러나 do ~ while문은 do 이하의 구문이 먼저 한 번 실행된 뒤에 조건식을 검사하므로 결과가 true이든 false이든 무조건 한번은 실행이 됩니다.	
	- do ~ while문은 조건식의 결과에 상관없이 루프를 반드시 한번 이상 실행시키도록 할 때 사용합니다.
	사용 예시)
	int i = 1;
		do {
			sum += i;
			i++;
		}while(i <= 10);
	
# 반복문 for -> 가장 중요! 제일 많이 사용!  (ForEx01, ForEx02, Quiz12, ForEx03, ForEx04, Quiz13 참고)
	- while 문에서 3가지. 시작값, 조건, 증감식이 한번에 for() 여기 괄호안에 들어가 있음. 그래서 훨씬 더 가독성이 좋고 사용빈도가 높음.
		int i =1;
		while(i <= 10)     --->   for(int i=1; i<=10; i++){    실행할 내용.(3)       }
		i++;                              (1)     (2)  (4)       
								여기서 1번 확인 후 2번 확인. 이후에 3번 실행. 다음에 4번 실행. 그리고 다시 2번 확인. 다시 3번 실행.
								이 과정을 반복.
								
								
	-  #변수의 swap
		int x = 10;
		int y = 5;
		위 두가지 변수의 값을 서로 바꾸어 주기 위해 
		temp라는 변수 즉 상자를 하나 더 만든다.
		
		int temp = x;
		x = y;
		y = temp;
		x를 템프에 넣고 y를 x에 넣고 템프를 y에 넣는다.  즉-> int temp = x = y = temp 이런 모양새가 되는것.
		
	* 다중반복문(MultiForEx01, Quiz14 참고.)
	
< 오늘 기억해둘 내용들>
-char 이름 = 숫자 -> 아스키 코드표에서 해당하는 숫자의 문자값으로 바뀌어서 표현됨.
 char name = 'A' 이렇게 표현도 가능. 이걸 int로 캐스팅하면 아스키 코드표에서 문자A에 해당하는 값인 65로 나타남.
 -내가 하고 있는 것들이 이해가 안 될때? 파악이 잘 안될 때는 출력을 해보는게 가장 파악하기 좋다.